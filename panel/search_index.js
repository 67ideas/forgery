var search_data = {"index":{"info":[["Array","lib/forgery/extensions/array.rb","classes/Array.html"," < Object","",1],["Forgery","lib/forgery/dictionaries.rb","classes/Forgery.html"," < Object","",1],["Address","Forgery","classes/Forgery/Address.html"," < Forgery","Generates random address information. ",1],["Basic","Forgery","classes/Forgery/Basic.html"," < Forgery","",1],["Dictionaries","Forgery","classes/Forgery/Dictionaries.html"," < Object","",1],["FileReader","Forgery","classes/Forgery/FileReader.html"," < Object","",1],["Formats","Forgery","classes/Forgery/Formats.html"," < Object","",1],["Internet","Forgery","classes/Forgery/Internet.html"," < Forgery","",1],["LoremIpsum","Forgery","classes/Forgery/LoremIpsum.html"," < Forgery","",1],["Monetary","Forgery","classes/Forgery/Monetary.html"," < Forgery","",1],["Name","Forgery","classes/Forgery/Name.html"," < Forgery","",1],["Personal","Forgery","classes/Forgery/Personal.html"," < Forgery","",1],["Hash","lib/forgery/extensions/hash.rb","classes/Hash.html"," < Object","",1],["Object","lib/forgery/forgery_api.rb","classes/Object.html"," < Object","",1],["Range","lib/forgery/extensions/range.rb","classes/Range.html"," < Object","",1],["String","lib/forgery/extensions/string.rb","classes/String.html"," < Object","",1],["Forgery","Object","classes/Object.html#M000079","(forgery, method=nil, *args)","Alternate Forgery api, see spec/forgery_spec.rb for examples. ",2],["[]","Forgery::Dictionaries","classes/Forgery/Dictionaries.html#M000003","(key)","",2],["[]","Forgery::Formats","classes/Forgery/Formats.html#M000081","(key)","",2],["abbreviated_gender","Forgery::Personal","classes/Forgery/Personal.html#M000071","()","",2],["boolean","Forgery::Basic","classes/Forgery/Basic.html#M000037","()","Gets a random boolean value Forgery(:basic).boolean # => true Forgery(:basic).boolean # => false ",2],["camelize","String","classes/String.html#M000010","(first_letter = :upper)","",2],["character","Forgery::LoremIpsum","classes/Forgery/LoremIpsum.html#M000049","(options={})","",2],["characters","Forgery::LoremIpsum","classes/Forgery/LoremIpsum.html#M000050","(quantity=10, options={})","",2],["city","Forgery::Address","classes/Forgery/Address.html#M000028","()","Gets a random city out of the 'cities' dictionary. Forgery(:address).city # => \"Anaheim\" Forgery(:address).city",2],["color","Forgery::Basic","classes/Forgery/Basic.html#M000038","()","",2],["company_name","Forgery::Name","classes/Forgery/Name.html#M000067","()","",2],["constantize","String","classes/String.html#M000015","()","",2],["constantize","String","classes/String.html#M000019","()","",2],["country","Forgery::Address","classes/Forgery/Address.html#M000036","()","Gets a random country out of the 'countries' dictionary. Forgery(:address).country # => \"Uruguay\" Forgery(:address).country",2],["dictionaries","Forgery","classes/Forgery.html#M000075","()","",2],["domain_name","Forgery::Internet","classes/Forgery/Internet.html#M000046","()","",2],["email_address","Forgery::Internet","classes/Forgery/Internet.html#M000047","()","",2],["encrypt","Forgery::Basic","classes/Forgery/Basic.html#M000031","(password=\"password\", salt=Time.now.to_s)","SHA1 hexdigests a password salted with the current time Forgery(:basic).encrypt # => \"b2fbd3955a36068e93e0b9db45bcb178f08336f5\"",2],["external_path_to_dictionary","Forgery::FileReader","classes/Forgery/FileReader.html#M000021","(dictionary)","Returns the path to a dictionary outside of forgery ",2],["external_path_to_format","Forgery::FileReader","classes/Forgery/FileReader.html#M000017","(format)","Returns the path to a format outside of forgery ",2],["female_first_name","Forgery::Name","classes/Forgery/Name.html#M000066","()","",2],["first_name","Forgery::Name","classes/Forgery/Name.html#M000063","()","",2],["formats","Forgery","classes/Forgery.html#M000076","()","",2],["formatted_money","Forgery::Monetary","classes/Forgery/Monetary.html#M000060","(options={})","",2],["frequency","Forgery::Basic","classes/Forgery/Basic.html#M000043","()","",2],["full_name","Forgery::Name","classes/Forgery/Name.html#M000064","()","",2],["gender","Forgery::Personal","classes/Forgery/Personal.html#M000070","()","",2],["hex_color","Forgery::Basic","classes/Forgery/Basic.html#M000039","()","",2],["internal_path_to_dictionary","Forgery::FileReader","classes/Forgery/FileReader.html#M000022","(dictionary)","Returns the path to a dictionary within forgery ",2],["internal_path_to_format","Forgery::FileReader","classes/Forgery/FileReader.html#M000018","(format)","Returns the path to a format inside of forgery ",2],["language","Forgery::Personal","classes/Forgery/Personal.html#M000074","()","",2],["last_name","Forgery::Name","classes/Forgery/Name.html#M000062","()","",2],["loaded?","Forgery::Dictionaries","classes/Forgery/Dictionaries.html#M000004","(key)","",2],["loaded?","Forgery::Formats","classes/Forgery/Formats.html#M000082","(key)","",2],["lorem_ipsum_characters","Forgery::LoremIpsum","classes/Forgery/LoremIpsum.html#M000059","()","",2],["lorem_ipsum_words","Forgery::LoremIpsum","classes/Forgery/LoremIpsum.html#M000058","()","",2],["male_first_name","Forgery::Name","classes/Forgery/Name.html#M000065","()","",2],["money","Forgery::Monetary","classes/Forgery/Monetary.html#M000061","(options={})","",2],["new","Forgery::Dictionaries","classes/Forgery/Dictionaries.html#M000002","()","",2],["new","Forgery::Formats","classes/Forgery/Formats.html#M000080","()","",2],["number","Forgery::Basic","classes/Forgery/Basic.html#M000041","(options={})","",2],["paragraph","Forgery::LoremIpsum","classes/Forgery/LoremIpsum.html#M000055","(options={})","",2],["paragraphs","Forgery::LoremIpsum","classes/Forgery/LoremIpsum.html#M000056","(quantity=2, options={})","",2],["password","Forgery::Basic","classes/Forgery/Basic.html#M000026","(options={})","Gets a random string for use as a password Forgery(:basic).password # => \"1MbyMQhU\" Forgery(:basic).password(:at_least",2],["path_to_dictionary","Forgery::FileReader","classes/Forgery/FileReader.html#M000020","(dictionary)","Returns the path to a dictionary. It will return the external path if the file exists, otherwise it will",2],["path_to_format","Forgery::FileReader","classes/Forgery/FileReader.html#M000016","(format)","Returns the path to a format. It will return the external path if the file exists, otherwise it will",2],["phone","Forgery::Address","classes/Forgery/Address.html#M000035","()","Gets one of the formats from 'phone_formats' and converts it to numbers. Forgery(:address).phone # =>",2],["province","Forgery::Address","classes/Forgery/Address.html#M000032","()","Gets a random Canadian province or territory out of the 'provinces' dictionary. Forgery(:address).province",2],["province_abbrev","Forgery::Address","classes/Forgery/Address.html#M000033","()","Gets a random Canadian province or territory abbreviation out of the 'province_abbrev' dictionary. Forgery(:address).province_abbrev",2],["race","Forgery::Personal","classes/Forgery/Personal.html#M000073","()","",2],["rails?","Forgery","classes/Forgery.html#M000078","()","",2],["rails_root","Forgery","classes/Forgery.html#M000077","()","",2],["random","Array","classes/Array.html#M000000","()","",2],["random","Range","classes/Range.html#M000007","()","",2],["random_subset","Array","classes/Array.html#M000001","(len=2)","",2],["range_from_quantity","Forgery::LoremIpsum","classes/Forgery/LoremIpsum.html#M000057","(quantity, options={})","",2],["read_dictionary","Forgery::FileReader","classes/Forgery/FileReader.html#M000011","(dictionary)","Returns an array of strings containing each line in the dictionary ",2],["read_file","Forgery::FileReader","classes/Forgery/FileReader.html#M000013","(file)","Reads a file while stripping leading and trailing whitespace, including newlines ",2],["read_format","Forgery::FileReader","classes/Forgery/FileReader.html#M000012","(format)","Returns an array of strings containing each line in the format ",2],["reset!","Forgery::Dictionaries","classes/Forgery/Dictionaries.html#M000005","()","",2],["reset!","Forgery::Formats","classes/Forgery/Formats.html#M000083","()","",2],["reverse_merge","Hash","classes/Hash.html#M000006","(other_hash)","Performs the opposite of merge, with the keys and values from the first hash taking precedence over the",2],["reverse_merge!","Hash","classes/Hash.html#M000008","(other_hash)","Performs the opposite of merge, with the keys and values from the first hash taking precedence over the",2],["sentence","Forgery::LoremIpsum","classes/Forgery/LoremIpsum.html#M000053","(options={})","",2],["sentences","Forgery::LoremIpsum","classes/Forgery/LoremIpsum.html#M000054","(quantity=2, options={})","",2],["shirt_size","Forgery::Personal","classes/Forgery/Personal.html#M000072","()","",2],["short_hex_color","Forgery::Basic","classes/Forgery/Basic.html#M000040","()","",2],["state","Forgery::Address","classes/Forgery/Address.html#M000029","()","Gets a random state out of the 'states' dictionary. Forgery(:address).state # => \"Mississippi\" Forgery(:address).state",2],["state_abbrev","Forgery::Address","classes/Forgery/Address.html#M000030","()","Gets a random state abbreviation out of the 'state_abbrev' dictionary. Forgery(:address).state_abbrev",2],["street_address","Forgery::Address","classes/Forgery/Address.html#M000027","()","Gets a full street address, including street number, street name, and street suffix. Forgery(:address).street_address",2],["street_name","Forgery::Address","classes/Forgery/Address.html#M000023","()","Gets a random street name out of the 'streets' dictionary. Forgery(:address).street_name # => \"Atwood\"",2],["street_number","Forgery::Address","classes/Forgery/Address.html#M000024","()","Gets one of the formats from 'street_number_formats' and converts it to numbers. Forgery(:address).street_number",2],["street_suffix","Forgery::Address","classes/Forgery/Address.html#M000025","()","Gets a random street suffix out of the 'street_suffixes' dictionary. Forgery(:address).street_suffix",2],["suffix","Forgery::Name","classes/Forgery/Name.html#M000069","()","",2],["text","Forgery::Basic","classes/Forgery/Basic.html#M000042","(options={})","",2],["text","Forgery::LoremIpsum","classes/Forgery/LoremIpsum.html#M000048","(what=:sentence, quantity=2, options={})","",2],["title","Forgery::Name","classes/Forgery/Name.html#M000068","()","",2],["to_numbers","String","classes/String.html#M000009","(replace='#')","",2],["top_level_domain","Forgery::Internet","classes/Forgery/Internet.html#M000045","()","",2],["underscore","String","classes/String.html#M000014","()","",2],["user_name","Forgery::Internet","classes/Forgery/Internet.html#M000044","()","",2],["word","Forgery::LoremIpsum","classes/Forgery/LoremIpsum.html#M000051","(options={})","",2],["words","Forgery::LoremIpsum","classes/Forgery/LoremIpsum.html#M000052","(quantity=10, options={})","",2],["zip","Forgery::Address","classes/Forgery/Address.html#M000034","()","Gets one of the formats from 'zip_formats' and converts it to numbers. Forgery(:address).zip # => \"52474\"",2],["LICENSE","files/LICENSE.html","files/LICENSE.html","","Copyright (c) 2007 Sevenwire LLC  Permission is hereby granted, free of charge, to any person obtaining",3],["README.markdown","files/README_markdown.html","files/README_markdown.html","","# Forgery  The Problem: Making meaningful development data for your application.  The Solution: A fake",3],["forgery.rb","files/lib/forgery_rb.html","files/lib/forgery_rb.html","","Require forgeries at the bottom of the file so Forgery works as a gem both within rails and outside of",3],["dictionaries.rb","files/lib/forgery/dictionaries_rb.html","files/lib/forgery/dictionaries_rb.html","","",3],["cities","files/lib/forgery/dictionaries/cities.html","files/lib/forgery/dictionaries/cities.html","","Adelanto Agoura Hills Alameda Albany Alhambra Aliso Viejo Alturas Amador City American Canyon Anaheim",3],["colors","files/lib/forgery/dictionaries/colors.html","files/lib/forgery/dictionaries/colors.html","","Red Blue Green Yellow Orange Purple Violet Indigo Teal Pink Fuscia Goldenrod Mauv Aquamarine Turquoise",3],["company_names","files/lib/forgery/dictionaries/company_names.html","files/lib/forgery/dictionaries/company_names.html","","Kwilith Eayo Voolith Eabox Gigabox Meeveo Yombu Eire Oyonder Dynazzy Demimbu Wikizz InnoZ Pixonyx Snaptags",3],["countries","files/lib/forgery/dictionaries/countries.html","files/lib/forgery/dictionaries/countries.html","","Afghanistan \u00c5land Albania Algeria American Samoa Andorra Angola Anguilla Antarctica Antigua and Barbuda",3],["female_first_names","files/lib/forgery/dictionaries/female_first_names.html","files/lib/forgery/dictionaries/female_first_names.html","","Mary Patricia Linda Barbara Elizabeth Jennifer Maria Susan Margaret Dorothy Lisa Nancy Karen Betty Helen",3],["frequencies","files/lib/forgery/dictionaries/frequencies.html","files/lib/forgery/dictionaries/frequencies.html","","Never Once Seldom Often Daily Weekly Monthly Yearly ",3],["genders","files/lib/forgery/dictionaries/genders.html","files/lib/forgery/dictionaries/genders.html","","Male Female",3],["languages","files/lib/forgery/dictionaries/languages.html","files/lib/forgery/dictionaries/languages.html","","Afrikaans Albanian Amharic Arabic Armenian Assamese Aymara Azeri Belarusian Bengali Bislama Bosnian Bulgarian",3],["last_names","files/lib/forgery/dictionaries/last_names.html","files/lib/forgery/dictionaries/last_names.html","","Smith Johnson Williams Jones Brown Davis Miller Wilson Moore Taylor Anderson Thomas Jackson White Harris",3],["lorem_ipsum","files/lib/forgery/dictionaries/lorem_ipsum.html","files/lib/forgery/dictionaries/lorem_ipsum.html","","Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Proin risus. Praesent lectus. Vestibulum quam",3],["male_first_names","files/lib/forgery/dictionaries/male_first_names.html","files/lib/forgery/dictionaries/male_first_names.html","","James John Robert Michael William David Richard Charles Joseph Thomas Christopher Daniel Paul Mark Donald",3],["name_titles","files/lib/forgery/dictionaries/name_titles.html","files/lib/forgery/dictionaries/name_titles.html","","Mr Ms Mrs Dr Rev Honorable ",3],["provinces","files/lib/forgery/dictionaries/provinces.html","files/lib/forgery/dictionaries/provinces.html","","Ontario Quebec Nova Scotia New Brunswick Manitoba British Columbia Prince Edward Island Saskatchewan",3],["races","files/lib/forgery/dictionaries/races.html","files/lib/forgery/dictionaries/races.html","","Alaskan Athabascan Alaska Native Aleut American Indian American Indian and Alaska Native (AIAN) Apache",3],["states","files/lib/forgery/dictionaries/states.html","files/lib/forgery/dictionaries/states.html","","Alabama Alaska Arizona Arkansas California Colorado Connecticut Delaware Florida Georgia Hawaii Idaho",3],["street_suffixes","files/lib/forgery/dictionaries/street_suffixes.html","files/lib/forgery/dictionaries/street_suffixes.html","","Alley Avenue Center Circle Court Crossing Drive Hill Junction Lane Park Parkway Pass Place Plaza Point",3],["streets","files/lib/forgery/dictionaries/streets.html","files/lib/forgery/dictionaries/streets.html","","1st 2nd 3rd 4th 5th 6th 7th 8th Aberg Acker Algoma Almo Alpine American American Ash Amoth Anderson Anhalt",3],["top_level_domains","files/lib/forgery/dictionaries/top_level_domains.html","files/lib/forgery/dictionaries/top_level_domains.html","","biz com info name net org gov edu mil",3],["array.rb","files/lib/forgery/extensions/array_rb.html","files/lib/forgery/extensions/array_rb.html","","",3],["hash.rb","files/lib/forgery/extensions/hash_rb.html","files/lib/forgery/extensions/hash_rb.html","","",3],["range.rb","files/lib/forgery/extensions/range_rb.html","files/lib/forgery/extensions/range_rb.html","","",3],["string.rb","files/lib/forgery/extensions/string_rb.html","files/lib/forgery/extensions/string_rb.html","","",3],["file_reader.rb","files/lib/forgery/file_reader_rb.html","files/lib/forgery/file_reader_rb.html","","",3],["forgery.rb","files/lib/forgery/forgery_rb.html","files/lib/forgery/forgery_rb.html","","",3],["address.rb","files/lib/forgery/forgery/address_rb.html","files/lib/forgery/forgery/address_rb.html","","Generates random address information. ",3],["basic.rb","files/lib/forgery/forgery/basic_rb.html","files/lib/forgery/forgery/basic_rb.html","","",3],["internet.rb","files/lib/forgery/forgery/internet_rb.html","files/lib/forgery/forgery/internet_rb.html","","",3],["lorem_ipsum.rb","files/lib/forgery/forgery/lorem_ipsum_rb.html","files/lib/forgery/forgery/lorem_ipsum_rb.html","","",3],["monetary.rb","files/lib/forgery/forgery/monetary_rb.html","files/lib/forgery/forgery/monetary_rb.html","","",3],["name.rb","files/lib/forgery/forgery/name_rb.html","files/lib/forgery/forgery/name_rb.html","","",3],["personal.rb","files/lib/forgery/forgery/personal_rb.html","files/lib/forgery/forgery/personal_rb.html","","",3],["forgery_api.rb","files/lib/forgery/forgery_api_rb.html","files/lib/forgery/forgery_api_rb.html","","Alternate Forgery api, see spec/forgery_spec.rb for examples. ",3],["formats.rb","files/lib/forgery/formats_rb.html","files/lib/forgery/formats_rb.html","","",3],["phone","files/lib/forgery/formats/phone.html","files/lib/forgery/formats/phone.html","","-(###)###-#### ",3],["street_number","files/lib/forgery/formats/street_number.html","files/lib/forgery/formats/street_number.html","","",3],["zip","files/lib/forgery/formats/zip.html","files/lib/forgery/formats/zip.html","","-####",3],["version.rb","files/lib/forgery/version_rb.html","files/lib/forgery/version_rb.html","","",3]],"searchIndex":["array","forgery","address","basic","dictionaries","filereader","formats","internet","loremipsum","monetary","name","personal","hash","object","range","string","forgery()","[]()","[]()","abbreviated_gender()","boolean()","camelize()","character()","characters()","city()","color()","company_name()","constantize()","constantize()","country()","dictionaries()","domain_name()","email_address()","encrypt()","external_path_to_dictionary()","external_path_to_format()","female_first_name()","first_name()","formats()","formatted_money()","frequency()","full_name()","gender()","hex_color()","internal_path_to_dictionary()","internal_path_to_format()","language()","last_name()","loaded?()","loaded?()","lorem_ipsum_characters()","lorem_ipsum_words()","male_first_name()","money()","new()","new()","number()","paragraph()","paragraphs()","password()","path_to_dictionary()","path_to_format()","phone()","province()","province_abbrev()","race()","rails?()","rails_root()","random()","random()","random_subset()","range_from_quantity()","read_dictionary()","read_file()","read_format()","reset!()","reset!()","reverse_merge()","reverse_merge!()","sentence()","sentences()","shirt_size()","short_hex_color()","state()","state_abbrev()","street_address()","street_name()","street_number()","street_suffix()","suffix()","text()","text()","title()","to_numbers()","top_level_domain()","underscore()","user_name()","word()","words()","zip()","license","readme.markdown","forgery.rb","dictionaries.rb","cities","colors","company_names","countries","female_first_names","frequencies","genders","languages","last_names","lorem_ipsum","male_first_names","name_titles","provinces","races","states","street_suffixes","streets","top_level_domains","array.rb","hash.rb","range.rb","string.rb","file_reader.rb","forgery.rb","address.rb","basic.rb","internet.rb","lorem_ipsum.rb","monetary.rb","name.rb","personal.rb","forgery_api.rb","formats.rb","phone","street_number","zip","version.rb"],"longSearchIndex":["lib/forgery/extensions/array.rb","lib/forgery/version.rb","forgery","forgery","forgery","forgery","forgery","forgery","forgery","forgery","forgery","forgery","lib/forgery/extensions/hash.rb","lib/forgery/forgery_api.rb","lib/forgery/extensions/range.rb","lib/forgery/extensions/string.rb","object","forgery::dictionaries","forgery::formats","forgery::personal","forgery::basic","string","forgery::loremipsum","forgery::loremipsum","forgery::address","forgery::basic","forgery::name","string","string","forgery::address","forgery","forgery::internet","forgery::internet","forgery::basic","forgery::filereader","forgery::filereader","forgery::name","forgery::name","forgery","forgery::monetary","forgery::basic","forgery::name","forgery::personal","forgery::basic","forgery::filereader","forgery::filereader","forgery::personal","forgery::name","forgery::dictionaries","forgery::formats","forgery::loremipsum","forgery::loremipsum","forgery::name","forgery::monetary","forgery::dictionaries","forgery::formats","forgery::basic","forgery::loremipsum","forgery::loremipsum","forgery::basic","forgery::filereader","forgery::filereader","forgery::address","forgery::address","forgery::address","forgery::personal","forgery","forgery","array","range","array","forgery::loremipsum","forgery::filereader","forgery::filereader","forgery::filereader","forgery::dictionaries","forgery::formats","hash","hash","forgery::loremipsum","forgery::loremipsum","forgery::personal","forgery::basic","forgery::address","forgery::address","forgery::address","forgery::address","forgery::address","forgery::address","forgery::name","forgery::basic","forgery::loremipsum","forgery::name","string","forgery::internet","string","forgery::internet","forgery::loremipsum","forgery::loremipsum","forgery::address","files/license.html","files/readme_markdown.html","files/lib/forgery_rb.html","files/lib/forgery/dictionaries_rb.html","files/lib/forgery/dictionaries/cities.html","files/lib/forgery/dictionaries/colors.html","files/lib/forgery/dictionaries/company_names.html","files/lib/forgery/dictionaries/countries.html","files/lib/forgery/dictionaries/female_first_names.html","files/lib/forgery/dictionaries/frequencies.html","files/lib/forgery/dictionaries/genders.html","files/lib/forgery/dictionaries/languages.html","files/lib/forgery/dictionaries/last_names.html","files/lib/forgery/dictionaries/lorem_ipsum.html","files/lib/forgery/dictionaries/male_first_names.html","files/lib/forgery/dictionaries/name_titles.html","files/lib/forgery/dictionaries/provinces.html","files/lib/forgery/dictionaries/races.html","files/lib/forgery/dictionaries/states.html","files/lib/forgery/dictionaries/street_suffixes.html","files/lib/forgery/dictionaries/streets.html","files/lib/forgery/dictionaries/top_level_domains.html","files/lib/forgery/extensions/array_rb.html","files/lib/forgery/extensions/hash_rb.html","files/lib/forgery/extensions/range_rb.html","files/lib/forgery/extensions/string_rb.html","files/lib/forgery/file_reader_rb.html","files/lib/forgery/forgery_rb.html","files/lib/forgery/forgery/address_rb.html","files/lib/forgery/forgery/basic_rb.html","files/lib/forgery/forgery/internet_rb.html","files/lib/forgery/forgery/lorem_ipsum_rb.html","files/lib/forgery/forgery/monetary_rb.html","files/lib/forgery/forgery/name_rb.html","files/lib/forgery/forgery/personal_rb.html","files/lib/forgery/forgery_api_rb.html","files/lib/forgery/formats_rb.html","files/lib/forgery/formats/phone.html","files/lib/forgery/formats/street_number.html","files/lib/forgery/formats/zip.html","files/lib/forgery/version_rb.html"]}}